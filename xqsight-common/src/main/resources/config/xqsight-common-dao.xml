<?xml version="1.0" encoding="UTF-8"?>
<!-- 全局数据访问模型 -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- =================== 平台数据源配置 ================== -->
	<!-- Alibaba Druid 数据源 -->
	<bean id="dataSourceCommon" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${pmpf.jdbc.url}" />
		<property name="username" value="${pmpf.jdbc.username}" />
		<property name="password" value="${pmpf.jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${pmpf.jdbc.initialSize}" />
		<property name="maxActive" value="${pmpf.jdbc.maxActive}" />
		<property name="minIdle" value="${pmpf.jdbc.minIdle}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${pmpf.jdbc.maxWait}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${pmpf.jdbc.minEvictableIdleTimeMillis}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${pmpf.jdbc.timeBetweenEvictionRunsMillis}" />

		<property name="validationQuery" value="${pmpf.jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${pmpf.jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${pmpf.jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${pmpf.jdbc.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${pmpf.jdbc.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${pmpf.jdbc.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${pmpf.jdbc.filters}" /> 
		<!-- 关闭长时间不使用的连接超时时间，单位秒 -->
		<property name="removeAbandoned" value="${pmpf.jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${pmpf.jdbc.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${pmpf.jdbc.logAbandoned}" />
	</bean>
	
	<!-- JNDI 数据源
		<bean id="dataSourceCommon" class="org.springframework.jndi.JndiObjectFactoryBean">
			<property name="jndiName">
				<value>${pmpf.datasource}</value> 
			</property>
		</bean> -->
	<!-- 配置平台层面的sqlSessionFactoryCommon -->
	<bean id="sqlSessionFactoryCommon" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceCommon" />
		<!-- 配置mybatis配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis/xqsight/mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath*:mybatis/xqsight/mapper/**/*.xml" />
	</bean>
	
	<!-- 配置平台层面的sqlSessionFactoryBatchCommon -->
	<bean id="sqlSessionFactoryBatchCommon" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceCommon" />
		<property name="mapperLocations" value="classpath*:mybatis/xqsight/batch/mapper/**/*.xml" />
	</bean>
	
	<bean id="sqlSessionBatchTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		 <!-- 第一个参数是 sqlSessionFactory -->
        <constructor-arg index="0" ref="sqlSessionFactoryBatchCommon"/>
        <!-- 第二个参数是 ExecutorType -->
        <constructor-arg index="1" value="BATCH"/>
	</bean>
	
	<!-- 配置扫描Mapper接口的包路径(批量) -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
		<property name="basePackage" value="com.xqsight.**.batchmapper"/>
		<property name="sqlSessionTemplateBeanName" value="sqlSessionBatchTemplate" />  
		<property name="annotationClass" value="com.xqsight.common.dao.batch.BatchAnnotation"/>
	</bean>
	
	<!-- 配置扫描Mapper接口的包路径 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryCommon" />
		<property name="basePackage" value="com.xqsight.**.mapper"/>
	</bean>

	<!-- JDBC事务管理器配置 -->
	<bean id="transactionManagerCommon" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSourceCommon"/>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManagerCommon">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="call*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="batch*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="dealWith*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="inIsolate*" propagation="REQUIRES_NEW" rollback-for="Throwable" />
			<tx:method name="*" propagation="SUPPORTS" rollback-for="Throwable" />
		</tx:attributes>
	</tx:advice>
    
	<aop:config>
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(* com.xqsight.**.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="interceptorPointCuts" />
	</aop:config> 
</beans>